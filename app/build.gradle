apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: "org.sonarqube"

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.mvpapp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
    }
    androidExtensions {
        experimental = true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'de.hdodenhof:circleimageview:3.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'org.mockito:mockito-core:2.27.0'    // Support Design
    implementation "com.android.support:design:${versions.android_support_version}"

    // RecyclerView
    implementation "com.android.support:recyclerview-v7:${versions.android_support_version}"

    // LiveData & ViewModel
    implementation "android.arch.lifecycle:extensions:${versions.lifecycle}"

    // Room
    implementation "android.arch.persistence.room:runtime:${versions.room}"
    kapt "android.arch.persistence.room:compiler:${versions.room}"
    // RxJava support for Room
    implementation "android.arch.persistence.room:rxjava2:${versions.room}"
    // Testing support
    androidTestImplementation "android.arch.core:core-testing:${versions.room}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.6.1"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.6.1"
    implementation "com.squareup.retrofit2:converter-gson:2.6.1"
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    implementation "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    implementation "com.google.code.gson:gson:${versions.gson}"

//    // Dagger 2
//    implementation "com.google.dagger:dagger:${versions.dagger}"
//    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxJava}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxAndroid}"

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    //Stetho
    implementation "com.facebook.stetho:stetho:${versions.stetho}"
    implementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
    // Espresso UI Testing
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$rootProject.ext.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$rootProject.ext.espressoVersion"

}
apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.8.2"
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
def fileFilter = [
        '**/databinding/**/*.*',
        '**/android/databinding/*Binding.*',
        '**/BR.*',
        '**/R.*',
        '**/R$*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*_MembersInjector.*',
        '**/Dagger*Component.*',
        '**/Dagger*Component$Builder.*',
        '**/*Module_*Factory.*',
        '**/*Fragment*.*',
        '**/*Activity*.*',
        '**/*Adapter*.*',
        '**/*ViewPager*.*',
        '**/*ViewHolder*.*',
        '**/*Module*.*'
]
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest','createDebugCoverageReport']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])


}
sonarqube {
    sonarqube {
        properties {
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.projectName", "SonarQubeSample"
            property "sonar.projectKey", "SonarQubeSample"
            property "sonar.host.url", "http://localhost:9000"
            property "sonar.projectVersion", "1.0"
            property "sonar.language", "kotlin"
            property "sonar.sources", "src/main/"
            property "sonar.java.binaries", "${buildDir}/intermediates/javac/debug"
            property 'sonar.java.test.binaries', "${buildDir}/intermediates/javac/debug"
            property 'sonar.junit.reportsPath', '${buildDir}/test-results/testDebugUnitTest'
            property "sonar.tests", ["src/test/java"]
            property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/coverage/debug/report.xml"
            property 'sonar.java.coveragePlugin', 'jacoco'
            property 'sonar.exclusions', '**/*.js,**/*.css,**/*.html'
            property 'sonar.jacoco.itReportPath', fileTree(dir: project.projectDir, includes: ['**/*.ec'])
            property 'sonar.jacoco.reportPath', fileTree(dir: project.projectDir, includes: ['**/*.exec'])

        }
    }

}

